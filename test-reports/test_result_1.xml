<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="pytest" skips="0" tests="1" time="66.180"><testcase classname="tests.test_omtest.test_omtest" file="tests\test_omtest\test_omtest.py" line="13" name="test_omtest[manual_pon_otdr_set1_0]" time="27.953567504882812"><failure message="AssertionError: manual_pon_otdr_set1 - test (FAIL)
assert True == False">ssh_conn = &lt;conftest.ssh_conn.&lt;locals&gt;.SshWrapper object at 0x041527B0&gt;, unit_name = &apos;farm1&apos;, config_name = &apos;manual_pon_otdr_set1&apos;
result_file_path = &apos;C:\\Users\\qkieu\\Documents\\Bitbucket\\FNET Versiv Platform\\mantis-top\\jenkins-pytest\\tmp/results\\farm1\\manual_pon_otdr_set1&apos;
request = &lt;FixtureRequest for &lt;Function &apos;test_omtest[manual_pon_otdr_set1_0]&apos;&gt;&gt;, topology = &apos;no fiber&apos;, debug = False, max_cmauto_time = 360, max_runs = 2, test_time = 50, omtest_num = 32
omtest_limit = &apos;General PON RL = 55 dB&apos;, end_type = 1, verify_topology = &apos;farm1_no_fiber_common&apos;, launch = 1000.0, tail = 0.0, bend = 0.5, loop = None, span_start = None, span_end = None, splitter = None, avg = 10
pw = {&apos;0&apos;: 5, &apos;1&apos;: 5, &apos;2&apos;: 5}, endt = 0.0, losst = 0.0, omtest_range = 0.0, wl = [2], test_golden_list = [&apos;conn_quality&apos;, &apos;skipevent_list&apos;, &apos;overall_length&apos;, &apos;overall_loss&apos;]
test_compare_list = [&apos;conn_quality&apos;, &apos;event_list&apos;, &apos;event_overall_lengths&apos;, &apos;event_losses_wl&apos;, &apos;event_reflectances_wl&apos;, &apos;overall_length&apos;, ...]

    def test_omtest(ssh_conn, unit_name, config_name, result_file_path, request,
                    topology, debug, max_cmauto_time, max_runs,
                    test_time, omtest_num, omtest_limit, end_type,
                    verify_topology, launch, tail, bend, loop,
                    span_start, span_end, splitter, avg, pw,
                    endt, losst, omtest_range, wl, test_golden_list,
                    test_compare_list):
    
        testDesc = unit_name
        testType = config_name
        resultDump = result_dump.ResultDump()
        saveAllResults = True                   # Need to implement?
    
        if resultDump.initResult():
            raise Exception(&quot;Unexpected result from initializing resultdump&quot;)
    
        manualSettings = omtest_range != None and avg != None and losst != None and endt != None
    
        num_fails = 0
        num_tests = 0
    
        resultsFilePath = result_file_path
        uniqTolerFilePath = os.path.join(os.path.dirname(__file__), &apos;compare/%s&apos; % unit_name) # TODO: FIX!!!
        commonTolerFilePath = os.path.join(os.path.dirname(__file__), &apos;compare&apos;)
    
        sTday = mantis_utils.get_todays_date()
    
        getModuleType = mantis_utils.get_module_type(ssh_conn)[1]
        assert getModuleType != &apos;no module attached&apos;, &quot;No module attached error. (FAIL)&quot;
        moduleType = getModuleType.split(&apos;-&apos;)[1]
    
        # create gldn directory under results
        jsonGldnFilesPath = os.path.join(resultsFilePath, &apos;gldn&apos;, moduleType)
        os.makedirs(jsonGldnFilesPath, exist_ok=True)
    
        status = ssh_conn.remove_file(&apos;/tmp/spoofotdr&apos;)
        assert status[0] == 0, &quot;Incorrect response from removing spoofotdr file.&quot;
        status = ssh_conn.remove_file(&apos;/tmp/%s*.tst&apos; % config_name)
        assert status[0] == 0, &quot;Incorrect response from removing tst file.&quot;
    
        farmDataJson = {}
        farmDataJson[&quot;result&quot;] = {}
        passFailDict = {False: &apos;fail&apos;, True: &apos;pass&apos;}
    
        parent_test_fail = False  # False = Pass; True = Fail
        max_time_fail = False
    
        # setup json Golden Compare file
        jsonGldnCompareFile = &quot;%s/%s_%s_gldn.json&quot; % (jsonGldnFilesPath, testDesc, testType)
        tstGldnCompareFile = &quot;%s/%s_%s_gldn.tst&quot; % (jsonGldnFilesPath, testDesc, testType)
    
        testGoldenList = test_golden_list
        testCompareList = test_compare_list
        maxCmautoTime = max_cmauto_time
        omTestNum = omtest_num
        maxRuns = max_runs
        expTestTime = test_time
        omtestLimitName = omtest_limit
        endType = end_type
        verifyTopologyJson = verify_topology
        launchLength = launch
        tailLength = tail
        loopLength = 0.0
        if loop != None:
            loopLength = loop
        bendEnabled = False
        spanEnabled = False
        bendValue = 0.5
        spanStart = -99.0
        spanEnd = -99.0
        if span_start != None:
            spanEnabled = True
            spanStart = span_start
        if span_end != None:
            spanEnabled = True
            spanEnd = span_end
        if bend != None:
            bendEnabled = True
            bendValue = bend
        if manualSettings:
            endThr = endt
            lossThr = losst
            omRange = omtest_range
            pwDict = pw
        else:
            splitter = &quot;&quot;
            avg = 0
            endThr = 0
            lossThr = 0
            omRange = 0
            wl = 0
            pwDict = {}
    
        wlParamList = fiber_utils.get_wl_list(moduleType)
        wlParams = &quot;&quot;
        if not manualSettings:
            wlParamList = fiber_utils.get_wl_list(moduleType)
            for wl in wlParamList:
                wlParams += &quot; -w%s&quot; %wl
        pParams = &quot;&quot;
        splitParams = &quot;&quot;
        if manualSettings:
            pParams = &quot;-prnge,0.0,avgt,0,lost,endt&quot;
            if splitter != None:
                splitParams = &quot; -s%s&quot; % splitter
        lParams = &quot;&quot;
        if launchLength != 0.0:
            if tailLength == 0.0:
                # Launch only
                lParams = &quot;-l%s,%s,1&quot; % (launchLength, tailLength)
            else:
                if loopLength == 0.0:
                    # Launch, Tail
                    lParams = &quot;-l%s,%s,2&quot; % (launchLength, tailLength)
                else:
                    # Launch, Loop, Tail
                    lParams = &quot;-l%s,%s,4,%s&quot; % (launchLength, tailLength, loopLength)
    
        ###############################################
        #   get verification values
        ###############################################
    
        uniqTolerFile = &apos;%s_%s.json&apos; % (verifyTopologyJson, moduleType)
        uniqTolerFileLoc = os.path.join(uniqTolerFilePath, uniqTolerFile)
        commonTolerFileLoc = os.path.join(commonTolerFilePath, &apos;commonVerify.json&apos;)
    
        jsonUniqTolr = mantis_utils.getJsonData(uniqTolerFileLoc)
        assert jsonUniqTolr != {}, &quot;Incorrect response from getting json data from %s. (FAIL)&quot; % uniqTolerFileLoc
    
        jsonCommonTolr = mantis_utils.getJsonData(commonTolerFileLoc)
        assert jsonCommonTolr != {}, &quot;Incorrect response from getting json data from %s. (FAIL)&quot; % commonTolerFileLoc
    
        ###############################################
        #   run real fiber test and save result
        ###############################################
    
        testResultFilePath = os.path.join(resultsFilePath, &apos;tests&apos;, moduleType)
        os.makedirs(testResultFilePath, exist_ok=True)
    
        # delete golden before running each combo
        if os.path.exists(jsonGldnCompareFile):
            os.remove(jsonGldnCompareFile)
    
        comboCnt = request.node.name.split(&apos;_&apos;)[-1].replace(&apos;]&apos;, &apos;&apos;)
        cwizPrinted = False
        meas_fail = False
        fiberResultNameStar = &apos;%s_%s_%s_%s_*.tst&apos; % (testDesc, testType, sTday, comboCnt)
    
        for runNum in range(1, maxRuns + 1):
            tc = &quot;%s Run %s&quot; % (testType, runNum)
            fiberResultName = &apos;%s_%s_%s_%s_%s.tst&apos; % (testDesc, testType, sTday, comboCnt, runNum)
            if manualSettings:
                tc = &quot;%s Combo %s Run %s&quot; % (testType, comboCnt, runNum)
                pParams = &quot;-prnge,0.0,avgt,0,lost,endt&quot;
                pParams = pParams.replace(&apos;rnge&apos;, str(omRange))
                pParams = pParams.replace(&apos;avgt&apos;, str(avg))
                pParams = pParams.replace(&apos;lost&apos;, str(lossThr))
                pParams = pParams.replace(&apos;endt&apos;, str(endThr))
    
                wlParams = &apos;&apos;
                for index in wl:
                    wlParams = wlParams + &quot; -w%s,%s&quot; % (wlParamList[index], pwDict[str(index)])
    
            # setup omtest command
            omTestCmd = &apos;omtest -t### ppp www lltt bend span --fibername \&quot;OS2 Singlemode\&quot; &apos; \
                        &apos;--limitname \&quot;lll\&quot;&apos;
    
            if bendEnabled:
                omTestCmd = omTestCmd.replace(&apos;bend&apos;, &apos;-e%s&apos; % bendValue)
            else:
                omTestCmd = omTestCmd.replace(&apos;bend&apos;, &apos;&apos;)
    
            if spanEnabled:
                omTestCmd = omTestCmd.replace(&apos;span&apos;, &apos;-z%s,%s&apos; % (spanStart, spanEnd))
            else:
                omTestCmd = omTestCmd.replace(&apos;span&apos;, &apos;&apos;)
    
            omTestCmd = omTestCmd.replace(&apos;###&apos;, str(omTestNum))
            omTestCmd = omTestCmd.replace(&apos;lll&apos;, omtestLimitName)
            omTestCmd = omTestCmd.replace(&apos;ppp&apos;, pParams)
            omTestCmd = omTestCmd + splitParams
            omTestCmd = omTestCmd + &apos; -o %s&apos; % fiberResultName
            omTestCmd = omTestCmd.replace(&apos;www&apos;, wlParams)
            omTestCmd = omTestCmd.replace(&apos;lltt&apos;, lParams)
    
            if avg &gt; 1:
                mf_num = mantis_utils.get_mainframe_model(ssh_conn)
                if mf_num[0]:
                    print(&apos;%s - incorrect response from getting mainframe model&apos;
                                        &apos; number (FAIL)&apos; % tc)
                    num_fails += 1
                    overall_fail = True
                    parent_test_fail = True
                    break
    
                if mf_num[1] == 2:
                    # floor for V2 mainframes is 30 secs
                    expTestTime = (len(wl) * avg) + 30
                else:
                    # floor for V1 mainframes is 40 secs
                    expTestTime = (len(wl) * avg) + 45
    
            # send omtest command
            startTime = time.time()
            cwizStat = ssh_conn.run_cmd(&apos;cwiz &apos; + omTestCmd, maxCmautoTime)
            deltaTime = time.time() - startTime
            if saveAllResults:
                print(&apos;%s - CWIZ command: %s (DEBUG)&apos; % (tc, omTestCmd))
    
            if cwizStat[0]:
                print(&apos;%s - incorrect response from CWIZ command: %s (FAIL)&apos;
                                    % (tc, omTestCmd))
                cwizStat = ssh_conn.run_cmd(&apos;cwiz abort&apos;, maxCmautoTime)
                if cwizStat[0]:
                    print(&apos;%s - incorrect response from CWIZ abort (FAIL)&apos; % tc)
                num_fails += 1
                overall_fail = True
                parent_test_fail = True
                break
    
            # verify execution time for omtest
            if deltaTime &gt; expTestTime:
                print(&apos;%s - incorrect max test time; meas: %.1f, exp: &lt;%s secs (FAIL)&apos; % (tc, deltaTime, expTestTime))
                if not cwizPrinted:
                    print(&apos;Cwiz: %s&apos; % omTestCmd)
                    cwizPrinted = True
                overall_fail = True
                parent_test_fail = True
                max_time_fail = True
    
            # move result file on target to local
            fiberResultLoc = os.path.join(testResultFilePath, fiberResultName)
            cwizStat = ssh_conn.get_file(&apos;/tmp/%s&apos; % fiberResultName, fiberResultLoc)
            if not os.path.isfile(fiberResultLoc):
                print(&apos;%s - unable to get %s result from target (FAIL)&apos; % (tc, fiberResultName))
                print(&apos;Cwiz: %s&apos; % omTestCmd)
                num_fails += 1
                overall_fail = True
                parent_test_fail = True
                break
            else:
                os.chmod(fiberResultLoc, 0o664)
    
            dumpStatus = resultDump.jsonLoadResult(fiberResultLoc, 2, True)
            if dumpStatus[0]:
                print(&apos;%s - unable to dump %s result from target (FAIL)&apos; % (tc, fiberResultName))
                print(&apos;Cwiz: %s&apos; % omTestCmd)
                num_fails += 1
                overall_fail = True
                parent_test_fail = True
                break
    
            jsonMeasData = dumpStatus[1]
    
            ###############################################
            #   verify golden general overall measurements
            ###############################################
    
            # does Gldn file exist?
            if not os.path.exists(jsonGldnCompareFile):
                # verify golden overall tests
                for test in testGoldenList:
                    if &apos;skip&apos; in test:
                        continue
                    if debug:
                        print(&apos;%s - verifying golden data: %s&apos; % (tc, test))
                    vfmargs = {
                        &quot;conn&quot;: ssh_conn,
                        &quot;test&quot;: test,
                        &quot;parse_otdr_result&quot;: parse_otdrResult,
                        &quot;json_meas_data&quot;: jsonMeasData,
                        &quot;json_golden_data&quot;: {},
                        &quot;json_verify_data&quot;: jsonUniqTolr,
                        &quot;test_case&quot;: tc,
                        # &quot;log&quot;: log,
                        &quot;test_wl_params&quot;: wlParamList,
                        &quot;end&quot;: endType,
                        &quot;first_run&quot;: True,
                        &quot;omtest_cmd&quot;: omTestCmd
                    }
                    verifyStat = fiber_utils.verify_fiber_meas(**vfmargs)
                    # did something bad happen within function
                    if verifyStat[0]:
                        print(&apos;%s - unable to verify %s result without golden (FAIL)&apos; % (tc, fiberResultName))
                        overall_fail = True
                        parent_test_fail = True
                        break
                    # did test fail
                    if verifyStat[1]:
                        print(&apos;%s - unable to verify %s test without golden (FAIL)&apos; % (tc, fiberResultName))
                        overall_fail = True
                        parent_test_fail = True
                        meas_fail = True
                        if not cwizPrinted:
                            print(&quot;Test failed with command: %s(FAIL)&quot; % omTestCmd)
                            cwizPrinted = True
                if not meas_fail:
                    # create golden json result
                    f = open(jsonGldnCompareFile, &apos;w&apos;)
                    f.write(jsonMeasData)
                    f.close()
    
                    # move file from results to golden
                    shutil.copyfile(fiberResultLoc, tstGldnCompareFile)
    
                    if not manualSettings:
                        print(&apos;%s - golden file %s added. (INFO)&apos; % (tc, jsonGldnCompareFile))
    
                else:
                    if saveAllResults:
                        # create Gldn json result to Gldn loc
                        f = open(jsonGldnCompareFile, &apos;w&apos;)
                        f.write(jsonMeasData)
                        f.close()
    
                    overall_fail = True
                    parent_test_fail = True
                    print(&apos;%s - golden file _not added. (FAIL)&apos; % tc)
                    break
    
            ###############################################
            #   compare measurements with golden data
            ###############################################
    
            else:
                jsonGldnData = mantis_utils.getJsonData(jsonGldnCompareFile)
                # did something happen when getting data
                if jsonGldnData == {}:
                    print(&quot;Incorrect response from getting json data from %s. (FAIL)&quot; % jsonGldnCompareFile)
                    num_fails += 1
                    overall_fail = True
                    parent_test_fail = True
                    break
    
                eventMismatch = False
                for test in testCompareList:
                    if &apos;skip&apos; in test:
                        continue
    
                    if debug:
                        print(&apos;%s - comparing meas vs golden data: %s&apos;
                                            % (tc, test))
    
                    # if event list has mismatch and test is of type event then skip / continue
                    if eventMismatch and &apos;event&apos; in test:
                        continue
    
                    # change event_overall_lengths toler in common
                    # to overall_length toler in unique
                    if (test == &quot;event_overall_lengths&quot;) \
                            and (any(&quot;overall_length&quot; in s for s in testGoldenList)):
                        jsonCommonTolr[&apos;event_overall_lengths&apos;][&apos;toler&apos;] = \
                            jsonUniqTolr[&apos;overall_length&apos;][&apos;toler&apos;]
    
                    # if test in Gldn list, then use unique Toler values; else use Common values
                    if any(test in s for s in testGoldenList):
                        jsonVerifyData = jsonUniqTolr
                    else:
                        jsonVerifyData = jsonCommonTolr
    
                    vfmargs = {
                        &quot;conn&quot;: ssh_conn,
                        &quot;test&quot;: test,
                        &quot;parse_otdr_result&quot;: parse_otdrResult,
                        &quot;json_meas_data&quot;: jsonMeasData,
                        &quot;json_golden_data&quot;: json.dumps(jsonGldnData),
                        &quot;json_verify_data&quot;: jsonVerifyData,
                        &quot;test_case&quot;: tc,
                        # &quot;log&quot;: log,
                        &quot;test_wl_params&quot;: wlParamList,
                        &quot;debug&quot;: debug,
                        &quot;end&quot;: endType,
                        &quot;first_run&quot;: False,
                        &quot;omtest_cmd&quot;: omTestCmd
                    }
                    verifyStat = fiber_utils.verify_fiber_meas(**vfmargs)
                    # did something bad happen within function
                    if verifyStat[0]:
                        print(&apos;%s - unable to verify %s result with golden (FAIL)&apos; % (tc, fiberResultName))
                        num_fails += 1
                        overall_fail = True
                        parent_test_fail = True
                        break
                    # did test fail
                    if verifyStat[1]:
                        print(&apos;%s - unable to verify %s test with golden (FAIL)&apos; % (tc, fiberResultName))
                        if not cwizPrinted:
                            print(&apos;Cwiz: %s&apos; % omTestCmd)
                            cwizPrinted = True
                        overall_fail = True
                        parent_test_fail = True
                        meas_fail = True
                        if verifyStat[1] == -1:
                            eventMismatch = True
    
            # farmDataJson[&quot;result&quot;][&quot;farm_number&quot;] = farmNum
            # farmDataJson[&quot;result&quot;][&quot;combo_number&quot;] = comboCnt
            # farmDataJson[&quot;result&quot;][&quot;run_number&quot;] = runNum
            # if &quot;end_type&quot; in jsonTests:
            #     farmDataJson[&quot;result&quot;][&quot;end_type&quot;] = jsonTests[&quot;end_type&quot;]
            # else:
            #     farmDataJson[&quot;result&quot;][&quot;end_type&quot;] = &quot;&quot;
            # if &quot;topology&quot; in jsonTests:
            #     farmDataJson[&quot;result&quot;][&quot;topology&quot;] = jsonTests[&quot;topology&quot;]
            # else:
            #     farmDataJson[&quot;result&quot;][&quot;topology&quot;] = &quot;&quot;
            # farmDataJson[&quot;result&quot;][&quot;cwiz_command&quot;] = omTestCmd.replace(&quot;\\&quot;, &quot;&quot;)
            # farmDataJson[&quot;result&quot;][&quot;status&quot;] = passFailDict[meas_fail]
            # farmDataJson[&quot;result&quot;][&quot;tst_id&quot;] = fiberResultName
            # farmDataJson[&quot;result&quot;][&quot;date&quot;] = sTday
            # farmDataJson[&quot;result&quot;][&quot;file_loc&quot;] = fiberResultLoc
    
            status = ssh_conn.remove_file(&apos;/tmp/%s*.tst&apos; % testDesc)
            if status[0]:
                print(&apos;%s - incorrect response from removing tst files. (FAIL)&apos;
                                    % testType)
                overall_fail = True
                parent_test_fail = True
                break
    
            if meas_fail:
                num_fails += 1
            print(&apos;Num Fails: %s&apos; % (num_fails))
    
&gt;       assert parent_test_fail == False, &apos;%s - test (FAIL)&apos; % testType
E       AssertionError: manual_pon_otdr_set1 - test (FAIL)
E       assert True == False

tests\test_omtest\test_omtest.py:438: AssertionError</failure></testcase><testcase time="0.015621662139892578"></testcase></testsuite>