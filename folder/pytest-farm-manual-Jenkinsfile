#!groovy

// Jenkinsfile for manual build

// Global variables
// scmBranchName = '*/master';
// scmBranchName = '*/topics/MAN-2976-jenkins-pytest'
// scmRemoteRefs = ''
// buildNode = 'linux';
// archiveImage = false;

projectdir = '.'
taskmap = [:];
utils = [:];

stage('Get files') {
    node {
        checkout scm;
        taskmap = readJSON file : "${projectdir}/taskmap.json";
        utils = load "${projectdir}/pytest-utils.groovy";
    }
}

setup = [:]
setup.'name'    = '';
setup.'ip'      = '';
setup.'configs' = '';
setup.'tests'   = '';

stage('Specify IP and Configs') {
    node {
        def type =  input(   
                            message: 'Unit IP and Config files', ok: 'Continue',
                            parameters: [
                                choice( name        : 'type', 
                                        choices     : ['daily_configs', 'pr_configs', 'manual'],
                                        description : 'Do you want to get configs from taskmap or manually specify configs?')
                            ]
                        );
        if (type == 'manual') {
            def manual_setup =  input(   
                                    message: 'Unit IP and Config files', ok: 'Continue',
                                    parameters: [
                                        string( name        : 'name', 
                                                defaultValue: 'farm1',
                                                description : 'What\'s the test unit\'s name? (which setup does it replicate? (for unique tolerance verification))'),
                                        string( name        : 'ip', 
                                                defaultValue: '0.0.0.0',
                                                description : 'What\'s the test unit\'s IP address?'),
                                        text(   name        : 'configs',
                                                defaultValue: './configs/sample_config.json',
                                                description : 'Please enter config files separated by a space')
                                    ]
                                );
            setup.'name' = manual_setup.'name';
            setup.'ip' = manual_setup.'ip';
            setup.'configs' = manual_setup.'configs';
        } else {
            setup.'name' =  input(   
                                message: "Test / Unit name for ${setup.'type'}", ok: 'Continue',
                                parameters: [
                                    choice( name        : 'name', 
                                            choices     : taskmap.keySet().collect(),
                                            description : 'What\'s the test unit\'s name?'),
                                ]
                            );
            setup.'ip' = taskmap[setup.'name'].'ip';
            setup.'configs' = taskmap[setup.'name'][setup.'type'];
        } 

        def testlist =  input(
                            message: "Tests from ${setup.'type'} configs for ${setup.'name'} test unit at ${setup.'ip'}.", ok: 'Run',
                            parameters: utils.listTests(setup.'configs').collect { booleanParam(name: "${it}", defaultValue : false, description : '')}
                    );
        
        testlist.each {test, selected ->
            if (selected) {
                setup.'tests' += test + ' '
            }
        }
    }
}

stage('Build') {
    node(buildNode) {
        utils.ospreyBuild(true, false) // Build ARM and X86 only, skip OSP firmware
    }
}

stage('Test') {
    utils.generateTestNode(setup).call();
}

stage('Notify') {
    node('linux') {
        utils.sendMyNotifications();
    }
}