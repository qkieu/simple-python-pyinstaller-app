#!groovy

// Jenkinsfile for manual build

taskmap = [:];
utils = [:];

node {
    stage('get files') {
        checkout scm;
        echo "getting taskmap";
        taskmap = readJSON file : "folder/taskmap.json";
        assert taskmap.farm1.ip == "0.0.0";
        echo "done getting taskmap";
        echo "====================";
        echo "loading utils";
        utils = load "folder/pytest-utils.groovy";
        assert utils.echoDebug("hi") == "hi";
        echo "done loading utils"
    }
}

def test_tasks = [:]


setup = [:]
setup.'name'    = '';
setup.'ip'      = '';
setup.'configs' = '';
setup.'tests'   = '';
setup.'type'    = '';      // Manual input vs getting from daily and pr

// Run agent tasks in parallel
// node {
//     checkout scm
    stage('Specify IP and Configs') {
        setup.'type' =  input(   
                            message: 'Unit IP and Config files', ok: 'Continue',
                            parameters: [
                                choice( name        : 'type', 
                                        choices     : ['daily_configs', 'pr_configs', 'manual'],
                                        description : 'Do you want to get configs from taskmap or manually specify configs?')
                            ]
                        );
        if (setup.'type' == 'manual') {
            def manual_setup =  input(   
                                    message: 'Unit IP and Config files', ok: 'Continue',
                                    parameters: [
                                        string( name        : 'name', 
                                                defaultValue: 'farm1',
                                                description : 'What\'s the test unit\'s name? (which setup does it replicate? (for unique tolerance verification))'),
                                        string( name        : 'ip', 
                                                defaultValue: '0.0.0.0',
                                                description : 'What\'s the test unit\'s IP address?'),
                                        text(   name        : 'configs',
                                                defaultValue: './configs/sample_config.json',
                                                description : 'Please enter config files separated by a space')
                                    ]
                                );
            setup.'name' = manual_setup.'name';
            setup.'ip' = manual_setup.'ip';
            setup.'configs' = manual_setup.'configs';
        } else {
            setup.'name' =  input(   
                                message: "Test / Unit name for ${setup.'type'}", ok: 'Continue',
                                parameters: [
                                    choice( name        : 'name', 
                                            choices     : taskmap.keySet().collect(),
                                            description : 'What\'s the test unit\'s name?'),
                                ]
                            );
            setup.'ip' = taskmap[setup.'name'].'ip';
            setup.'configs' = taskmap[setup.'name'][setup.'type'];
        } 

        def testlist =  input(
                            message: "Tests from ${setup.'type'} configs for ${setup.'name'} test unit at ${setup.'ip'}.", ok: 'Run',
                            parameters: utils.listTests(setup.'configs').collect { booleanParam(name: "${it}", defaultValue : false, description : '')}
                    );
        
        // testlist.each {test, selected ->
        //     if (selected) {
        //         setup.'tests' += test + ' '
        //     }
        // }
    }
// }

utils.generateTestNode(setup).call();

node('linux') {
    utils.sayHi('Sending Notifications')
    // utils.sendMyNotifications(failedStages);
}