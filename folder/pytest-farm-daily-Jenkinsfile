#!groovy

// Jenkinsfile for daily build

// Imports

// Load utilities

// Git banches and notifiers
// scmBranchName = 'pull-requests/$PULL_REQUEST_ID/merge';
// scmRemoteRefs = '+refs/heads/*:refs/remotes/origin/* +refs/pull-requests/*:refs/remotes/origin/pull-requests/*';
// usersToNotify = params.EMAIL_LIST.split("\\r?\\n")

// def taskmap = readJSON file : "${workspace}@script/taskmap.json";

// node {
//     def workspace = pwd() 
//     def utils = load "${workspace}@script/pytest-utils.groovy"
//     def test_tasks = [:];

//     taskmap.each { taskname, tasksettings ->
//         def setup = [:]
//         setup.'name'    = taskname;
//         setup.'ip'      = tasksettings.ip;
//         setup.'configs' = tasksettings.daily_configs;
//         setup.'tests'   = '';
//         setup.'type'    = 'pr_configs';

//         test_tasks[taskname] = utils.generateTestNode(setup);

//         parallel(test_tasks);
//     }
// }

// /////////////////////////////////
// // TODO: Implement build tests //
// /////////////////////////////////

// // // Bitbucket parameters used here
// // echoDebug("FROM_HASH: ${params.PULL_REQUEST_FROM_HASH}")
// // echoDebug("AUTHOR_EMAIL: ${params.PULL_REQUEST_AUTHOR_EMAIL}")
// // echoDebug("PR_ID: ${params.PULL_REQUEST_ID}")
// // // Bitbucket parameters not used here
// // echoDebug("FROM_REPO: ${params.PULL_REQUEST_FROM_SSH_CLONE_URL}")
// // echoDebug("FROM_BRANCH: ${params.PULL_REQUEST_FROM_BRANCH}")
// // echoDebug("TO_REPO: ${params.PULL_REQUEST_TO_SSH_CLONE_URL}")
// // echoDebug("TO_HASH: ${params.PULL_REQUEST_TO_HASH}")
// // echoDebug("TO_BRANCH: ${params.PULL_REQUEST_TO_BRANCH}")
// // echoDebug("AUTHOR_NAME: ${params.PULL_REQUEST_AUTHOR_DISPLAY_NAME}")
// // echoDebug("PR_REVIEWERS: ${params.PULL_REQUEST_REVIEWERS_EMAIL}")

// // def test_tasks = [:];

// // node {
// //     def workspace = pwd() 
// //     File f = new File("${workspace}@script/taskmap.json");
// //     def taskmap = new JsonSlurper().parseText(f.text);
// // }

// // taskmap.each { taskname, tasksettings ->
// //     def setup = [:]
// //     setup.'name'    = taskname;
// //     setup.'ip'      = tasksettings.ip;
// //     setup.'configs' = tasksettings.daily_configs;
// //     setup.'tests'   = '';
// //     setup.'type'    = 'pr_configs';

// //     test_tasks[taskname] = utils.generateTestNode(setup);
// // }

// // Run agent tasks in parallel
// // parallel(test_tasks)

// node('linux') {
//     utils.sayHi('Sending Notifications')
//     // utils.sendMyNotifications(failedStages);
// }

taskmap = [:];
utils = Object();

node {
    stage('get files') {
        checkout scm;
        echo "getting taskmap";
        taskmap = readJSON file : "folder/taskmap.json";
        assert taskmap.farm1.ip == "0.0.0";
        echo "done getting taskmap";
        echo "====================";
        echo "getting utils";
        utils = load file : "folder/pytest-utils.groovy";
        assert utils.echoDebug("hi") == "hi";
    }
}

