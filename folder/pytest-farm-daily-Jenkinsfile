#!groovy

// Jenkinsfile for manual build

// Global setup variable
setup = [:]
// scmBranchName = '*/master';
setup.scmBranchName = '*/topics/MAN-2976-jenkins-pytest';
setup.scmRemoteRefs = '';
setup.usersToNotify = params.EMAIL_LIST.split("\\r?\\n");
setup.buildNode = 'linux';
setup.buildImage = true;
setup.runUnitTests = true;
setup.archiveImage = false;
setup.cleanCheckout = true;
setup.imageFromFTP = '';

// Other global variables
projectdir = 'folder'
taskmap = [:];
mantask = [:]
utils = [:];

// Helper functions for differentiating between farms during test selects
// since there can be duplicated test names
def hidden(s) {
    return "<p hidden> ${s}</p>";
}

def extractHidden(string) {
    def a = string.split("<p hidden> ")[0];
    def b = string.split("<p hidden> ")[1] - "</p>";
    return [a, b];
}

// helper function to generate test script name
def testScriptFromClassName(className) {
    // expected className: testscripts.test_omtest.test_omtest
    // reconstuct testScript to testscripts/test_omtest/test_omtest.py
    def testScript = className.replaceAll('.', '/') + '.py';
    return testScript
}

// helper function to get config file by backtracking taskmap
def configFromName(taskMap, testCase, unitName) {
    // expected testCase: test_omtest[auto_pon_otdr-0]
    // check each config file in taskMap
    taskMap.unitName.configs.split(" ").each {
        // get the case string before the index (ex: auto_pon_otdr-)
        caseName = it.subString(it.lastIndexOf('/') + 1).replaceAll('.json', '-');
        // return the config if matches
        if(testCase.contains(caseName)) {
            return it;
        }
    }
    // else return empty string
    return "";
}

def taskFromBuildResult(taskMap, buildResult) {
    def newmap = [:]
    buildResult.suites.each { unitIndex, res ->
        def unitName = res.enclosingBlockNames[0]
        res.cases.each { index, detail ->
            if(detail.status == "FAILED") {
                configString = configFromName(taskMap, detail.name, unitName) + ' ';
                testString = testScriptFromClassName(detail.className) + '::' + detail.name + ' ';
                if(newmap.containsKey(unitName)) {
                    newmap.unitName.configs += configString;
                    newmap.unitName.tests += testString;
                } else {
                    newmap.unitName = [:];
                    newmap.unitName.configs = configString;
                    newmap.unitName.ip = taskMap.unitName.ip;
                    newmap.unitName.tests = testString;
                }
            }
        }
    }
}

// Get information from taskmap and tools from pytest-utils
stage('Get files') {
    node('linux') {
        checkout scm;
        taskmap = readJSON file : "${projectdir}/taskmap.json";
        utils = load "${projectdir}/pytest-utils.groovy";
    }
}

// Get manual setup settings
stage('Setup') {
    node('linux') {
        utils.setBuildSetup() 
    }
}

// Get manual test settings
stage('Specify IP and Configs') {
    node('linux') {
        try {
            timeout(time: 5, unit: 'MINUTES') {
                def testType = input(
                                message: "Test type", ok: 'Continue',
                                parameters: [choice(name: "testType", choices: ["daily", "manual", "custom"], description: "Automatically get failed tests | Full custom")]
                    );
                if(testType == "custom") {
                    // Get units from taskmaps
                    def units =  input(   
                                message: "Unit name", ok: 'Continue',
                                parameters: taskmap.keySet().collect {booleanParam(name: "${it}", defaultValue : false, description : '')}
                        );
                    
                    // Get configs and initialize manual task map units
                    configs = [];
                    units.each { unit, selected ->
                        if (selected) {
                            mantask["${unit}"] = [:];
                            mantask["${unit}"]["ip"] = taskmap["${unit}"]["ip"]
                            mantask["${unit}"]["configs"] = '';
                            mantask["${unit}"]["tests"] = '';
                            def desc = "${unit}\'s configs";
                            configs << booleanParam(name: "all" + hidden(unit), defaultValue: false, description: desc);
                            taskmap["${unit}"]["configs"].split(" ").each{
                                configs << booleanParam(name: "${it}" + hidden(unit), defaultValue: false);
                            }
                        }
                    };

                    def unitconfigs = input (
                                        message: "Unit configs", ok: 'Continue',
                                        parameters: configs
                                    );
                    
                    // Add configs to each unit
                    def allList = []; // Start list to track which unit have all selected
                    unitconfigs.each {config, selected ->
                        if(selected) {
                            def (cf, un) = extractHidden(config);
                            // Add all configs to the unit
                            if(cf == 'all') {
                                mantask["${un}"]["configs"] = taskmap["${un}"]["configs"];
                                allList << un;
                            }
                            // Add single selected config if all was not selected
                            if(!allList.contains(un)) {
                                mantask["${un}"]["configs"] += "${cf} ";
                            }
                        }
                    }
                
                    // Get tests
                    tests = [];
                    mantask.each {unit, settings ->
                        def desc = "${unit}\'s tests"
                        utils.listTests(settings['configs']).each {
                            if(it != "") {
                                tests << booleanParam(name: "${it}" + hidden(unit), defaultValue: false, description : desc);
                                desc = ""
                            }
                        }
                    }
                    
                    def unittests = input (
                                        message: "Unit tests", ok: 'Continue',
                                        parameters: tests
                                    );

                    // Add tests to each unit
                    unittests.each {test, selected ->
                        if(selected) {
                            def (ts, un) = extractHidden(test);
                            mantask["${un}"]["tests"] += "${ts} ";
                        }
                    }   
                } else {
                    def buildSelect = input(
                                        message: "Build number", ok: 'Continue',
                                        parameters: [
                                            string(name: "buildNum", description: "What build number?", trim: true),
                                            booleanParam(name: "rerunAll", description: "Run all failed?", defaultValue: true)
                                    ]);
                    
                    sh "wget ${env.JENKINS_URL}job/osprey-${testType}-test-debug/${buildSelect.buildNum}/testReport/api/json -O ${projectdir}/tmp/buildresult.json";
                    buildResult = readJSON file : "${projectdir}/tmp/buildresult.json";
                    mantask = taskFromBuildResult(taskMap, buildResult);
                    writeJSON file : 'output.json', json: mantask;
                }
            }
        } catch(err) {
            // Abort build if input timeout
            currentBuild.result = 'ABORTED';
            utils.sendMyNotifications();
            error("No user input");
        }
    }
}

// Run Build if need to build image or run unit test
if(setup.buildImage || setup.runUnitTests) {
    stage('Build') {
        node(setup.buildNode) {
            utils.ospreyBuild()
        }
    }
}

// Run Test if need to run unit tests
if(setup.runUnitTests) {
    stage('Test') {
        utils.startTests(mantask);
    }
}